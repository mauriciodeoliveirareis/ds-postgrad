install_packages <- function(pkg) {
# Install package if it is not already
if (!(pkg %in% installed.packages()[, "Package"])){
install.packages(pkg, repos='http://cran.us.r-project.org')
}
library(pkg, character.only = TRUE)
} # end installPackages()
#Create the list of packages we need
pkg_list = c("tidyverse", "modelr", "carData", "car")
#Call our function passing it the list of packages
lapply(pkg_list, install_packages)
#SETUP DATAFRAME
#First we are going to load the dataset salaries from the package carData
#We load it into a dataframe we call acad_salary (you can change it to whatever you like)
acad_salary<-carData::Salaries
#LOOK AT THE DATA
#Get a list of all variables in the dataset using colnames
names(salary)
#SETUP DATAFRAME
#First we are going to load the dataset salaries from the package carData
#We load it into a dataframe we call acad_salary (you can change it to whatever you like)
acad_salary<-carData::Salaries
View(acad_salary)
#LOOK AT THE DATA
#Get a list of all variables in the dataset using colnames
names(salary)
#LOOK AT THE DATA
#Get a list of all variables in the dataset using colnames
names(acad_salary)
#You can look at the data in a variable by entering its name at the command prompt
acad_salary$salary
#You can use the str function to get an overview of the variable
str(acad_salary$discipline)
#Use summary to get a relevant statistical summary for a variable e.g. by discipline
#- this will give use a frequencies as nationality is categorical
summary(acad_salary$discipline)
#For salary - this will give use median, mean, IQR, max and min for the salary as it is a scale
summary (acad_salary$salary)
#Or get a summary of all the variables in the dataset
summary(salary)
#Or get a summary of all the variables in the dataset
summary(acad_salary)
#We start by creating the table
tab<-table(acad_salary$discipline, acad_salary$rank)
tab #show the table with frequencies
prop.table(tab) # shows probabilities for each discipline for each rank
prop.table(tab) # shows probabilities for each discipline for each rank
prop.table(tab) # shows probabilities for each discipline for each rank
prop.table(tab) # shows probabilities for each discipline for each rank
prop.table(tab) # shows probabilities for each discipline for each rank
-------------------------------------------------------------------------------
#### MEASURES OF CENTRAL TENDENCY
#Median
median(acad_salary$salary)
#Mean
mean(acad_salary$salary)
#You can assign the outcome to a variable
meansal <- mean(acad_salary$salary)
#and then display it on screen
meansal
#Or use the print function to make it look the way you want
print(meansal, digits=1)
getmode <- function(v)
{
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
#Use the function to get the mode of salary
getmode(acad_salary$salary)
------------------------------------------------------------------------------------------------
#### MEASURES OF DISPERSION
#Range
range(acad_salary$salary)
mean(141, 155, 130, 146, 141, 134)
(141 + 155 + 130 + 146 + 141 + 134) /6
?mean
mean(141, 155, 130, 146, 141, 134, trim = 1)
mean(141, 155, 130, 146, 141, 134, trim = 5)
median(141, 155, 130, 146, 141, 134)
mean(c(141, 155, 130, 146, 141, 134))
range(c(141, 155, 130, 146, 141, 134))
sd(c(141, 155, 130, 146, 141, 134))
sd(c(141, 155, 130, 146, 141, 134))^2
var(c(141, 155, 130, 146, 141, 134))
var(c(141, 155, 130, 146, 141, 134))
install_packages <- function(pkg) {
# Install package if it is not already
if (!(pkg %in% installed.packages()[, "Package"])){
install.packages(pkg, repos='http://cran.us.r-project.org')
}
library(pkg, character.only = TRUE)
} # end installPackages()
#Create the list of packages we need
pkg_list = c("tidyverse", "modelr", "carData", "car")
#Call our function passing it the list of packages
lapply(pkg_list, install_packages)
View(acad_salary)
#SETUP DATAFRAME
#First we are going to load the dataset salaries from the package carData
#We load it into a dataframe we call acad_salary (you can change it to whatever you like)
acad_salary<-carData::Salaries
#LOOK AT THE DATA
#Get a list of all variables in the dataset using colnames
names(acad_salary)
#You can look at the data in a variable by entering its name at the command prompt
acad_salary$salary
#You can use the str function to get an overview of the variable
str(acad_salary$discipline)
#Use summary to get a relevant statistical summary for a variable e.g. by discipline
#- this will give use a frequencies as nationality is categorical
summary(acad_salary$discipline)
#For salary - this will give use median, mean, IQR, max and min for the salary as it is a scale
summary (acad_salary$salary)
#Or get a summary of all the variables in the dataset
summary(acad_salary)
#We start by creating the table
tab<-table(acad_salary$discipline, acad_salary$rank)
tab #show the table with frequencies
prop.table(tab) # shows probabilities for each discipline for each rank
prop.table(tab) # shows probabilities for each discipline for each rank
prop.table(tab) # shows probabilities for each discipline for each rank
prop.table(tab) # shows probabilities for each discipline for each rank
#Mean
mean(acad_salary$salary)
#You can assign the outcome to a variable
meansal <- mean(acad_salary$salary)
#and then display it on screen
meansal
#Or use the print function to make it look the way you want
print(meansal, digits=1)
getmode <- function(v)
{
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
#Use the function to get the mode of salary
getmode(acad_salary$salary)
#Use the function to get the mode of salary
getmode(acad_salary$salary)
#Quantiles
quantile(acad_salary$salary)
#Quantiles
quantile(acad_salary$salary)
#to get 1st quantile
x=quantile(acad_salary$salary); x[1]
#Interquartile Range
IQR(acad_salary$salary)
#In this script we are going to initiate tidyverse which includes ggplot2
install_packages <- function(pkg) {
# Install package if it is not already
if (!(pkg %in% installed.packages()[, "Package"])){
install.packages(pkg, repos='http://cran.us.r-project.org')
}
library(pkg, character.only = TRUE)
} # end installPackages()
#In this script we are going to initiate tidyverse which includes ggplot2
install_packages <- function(pkg) {
# Install package if it is not already
if (!(pkg %in% installed.packages()[, "Package"])){
install.packages(pkg, repos='http://cran.us.r-project.org')
}
library(pkg, character.only = TRUE)
} # end installPackages()
#Create the list of packages we need
pkg_list = c("tidyverse")
#Call our function passing it the list of packages
lapply(pkg_list, install_packages)
#Part ONE
#-- Some Basics with ggplot
#facebookNarcissim - data file from a study that looked at ratings of Facebook profile pictures
#which were rated (on coolness, fashion, attractiveness and glamour)
#and predicting from this how high the person predicted rates on narcissism
facebookData <- read.delim("facebookNarcissism.dat",  header = TRUE)
#ggplot with point - total score on narcissism questionnaire v rating
graph <- ggplot(facebookData, aes(NPQC_R_Total, Rating))
graph + geom_point() + ggtitle("geompoint")
graph <- ggplot(facebookData, aes(NPQC_R_Total, Rating))
#Call our function passing it the list of packages
lapply(pkg_list, install_packages)
#Part ONE
#-- Some Basics with ggplot
#facebookNarcissim - data file from a study that looked at ratings of Facebook profile pictures
#which were rated (on coolness, fashion, attractiveness and glamour)
#and predicting from this how high the person predicted rates on narcissism
facebookData <- read.delim("facebookNarcissism.dat",  header = TRUE)
#In this script we are going to initiate tidyverse which includes ggplot2
setwd(getSrcDirectory()[1])
#In this script we are going to initiate tidyverse which includes ggplot2
setwd(getSrcDirectory()[1])
#In this script we are going to initiate tidyverse which includes ggplot2
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
#In this script we are going to initiate tidyverse which includes ggplot2
setwd(dirname(getActiveDocumentContext()$path))
#In this script we are going to initiate tidyverse which includes ggplot2
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
install_packages <- function(pkg) {
# Install package if it is not already
if (!(pkg %in% installed.packages()[, "Package"])){
install.packages(pkg, repos='http://cran.us.r-project.org')
}
library(pkg, character.only = TRUE)
} # end installPackages()
#Part ONE
#-- Some Basics with ggplot
#facebookNarcissim - data file from a study that looked at ratings of Facebook profile pictures
#which were rated (on coolness, fashion, attractiveness and glamour)
#and predicting from this how high the person predicted rates on narcissism
facebookData <- read.delim("facebookNarcissism.dat",  header = TRUE)
#Part ONE
#-- Some Basics with ggplot
#facebookNarcissim - data file from a study that looked at ratings of Facebook profile pictures
#which were rated (on coolness, fashion, attractiveness and glamour)
#and predicting from this how high the person predicted rates on narcissism
facebookData <- read.delim("facebookNarcissism.dat",  header = TRUE)
#ggplot with point - total score on narcissism questionnaire v rating
graph <- ggplot(facebookData, aes(NPQC_R_Total, Rating))
graph + geom_point() + ggtitle("geompoint")
#ggplot with triangle as point
graph + geom_point(shape = 17) + ggtitle("geom_point(shape = 17)")
#adjusting point size
graph + geom_point(size = 6) + ggtitle ("geom_point(size = 3)")
#ggplot with point - total score on narcissism questionnaire v rating
graph <- ggplot(facebookData, aes(NPQC_R_Total, Rating))
graph + geom_point() + ggtitle("geompoint")
View(facebookData)
library("rstudioapi")
setwd(getSrcDirectory()[1])
setwd(dirname(getActiveDocumentContext()$path))
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
install_packages <- function(pkg) {
# Install package if it is not already
if (!(pkg %in% installed.packages()[, "Package"])){
install.packages(pkg, repos='http://cran.us.r-project.org')
}
library(pkg, character.only = TRUE)
} # end installPackages()
#Create the list of packages we need
pkg_list = c("tidyverse")
#Call our function passing it the list of packages
lapply(pkg_list, install_packages)
#NOTE: Once installed we could just load tidyverse using the library command - library(tidyverse)
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
#NOTE: Once installed we could just load tidyverse using the library command - library(tidyverse)
facebookData <- read.delim("experim.dat",  header = TRUE)
#NOTE: Once installed we could just load tidyverse using the library command - library(tidyverse)
experimData <- read.delim("experim.dat",  header = TRUE)
View(experimData)
#NOTE: Once installed we could just load tidyverse using the library command - library(tidyverse)
experimData <- read.delim("experim.dat",  header = TRUE, sep = " ")
?read.delim
summary(experimData)
festivalData <- read.delim("DownloadFestival.dat",  header = TRUE)
#Hygiene by gender, here we let ggplot output some info for the legend
festivalHistogram <- ggplot(festivalData, aes(x=day1, color=gender))
festivalHistogram + geom_histogram(fill="white",binwidth = 0.4) + labs(x = "Hygiene (Day 1 of Festival)", y = "Frequency")
#Hygiene by gender, here we let ggplot output some info for the legend
histogram <- ggplot(experimData, aes(x=fost1))
histogram + geom_histogram(fill="white",binwidth = 0.4) + labs(x = "Hygiene (Day 1 of Festival)", y = "Frequency")
#Hygiene by gender, here we let ggplot output some info for the legend
histogram <- ggplot(experimData, aes(x=fost1))
histogram + geom_histogram(fill="white",binwidth = 0.4) + labs(x = "Fear of statistics time 1", y = "Frequency")
#Hygiene by gender, here we let ggplot output some info for the legend
histogram <- ggplot(experimData, aes(x=fost1))
histogram + geom_histogram(fill="black",binwidth = 0.4) + labs(x = "Fear of statistics time 1", y = "Frequency")
histogram <- ggplot(experimData, aes(x=fost2))
histogram + geom_histogram(fill="black",binwidth = 0.4) + labs(x = "Fear of statistics time 1", y = "Frequency")
chickFlick = read.delim("ChickFlick.dat",  header = TRUE)
#Create a basic bar chart of levels of interest - simply a frequency count
bar<-ggplot(chickFlick, aes(x=interest)) + geom_bar()
bar
#Create a bar chart from the data showing bars for interest for each film by gender
#basic bar chart of  mean interest per film
bar <- ggplot(chickFlick, aes(film, interest))
bar + stat_summary(fun.y=mean, geom="bar")
#barplot by gender
bar <- ggplot(experimData, aes(fost1, sex))
bar + stat_summary(fun.y=mean, geom="bar")
#Adding gender to the mix
#Create a bar chart showing mean values for each gender, and using the scale_fill_manual function to change the colours
bar <- ggplot(chickFlick, aes(film, interest, fill = gender ))
bar + stat_summary(fun.y = mean, geom = "bar", position="dodge") + labs(x="Film") + labs(y="Mean interest") + scale_fill_manual("Gender", values=c("Female" = "#008000", "Male" = "#0000FF"))
#barplot by gender
bar <- ggplot(experimData, aes(fost1, fost2, fill = sex))
bar + stat_summary(fun.y = mean, geom = "bar", position="dodge") + labs(x="Film") + labs(y="Mean interest") + scale_fill_manual("Gender", values=c("Female" = "#008000", "Male" = "#0000FF"))
bar <- ggplot(experimData, aes(fost1, sex))
bar + stat_summary(fun.y=mean, geom="bar")
#barplot by gender
bar <- ggplot(experimData, aes(sex, fost1))
bar + stat_summary(fun.y=mean, geom="bar")
bar <- ggplot(experimData, aes(sex, fost2))
bar + stat_summary(fun.y=mean, geom="bar")
#barplot by gender
bar1 <- ggplot(experimData, aes(sex, fost1)) + stat_summary(fun.y=mean, geom="bar")
bar2 <- ggplot(experimData, aes(sex, fost2)) + stat_summary(fun.y=mean, geom="bar")
#barplot by gender
bar1 <- ggplot(experimData, aes(sex, fost1)) +
stat_summary(fun.y=mean, geom="bar")
#barplot by gender
bar1 <- ggplot(experimData, aes(sex, fost1))
bar1 + stat_summary(fun.y=mean, geom="bar")
#barplot by gender
bar1 <- ggplot(experimData, aes(sex, fost1))
bar1 <- bar1 + stat_summary(fun.y=mean, geom="bar")
bar1
bar2 <- ggplot(experimData, aes(sex, fost2))
bar2 <- bar2 + stat_summary(fun.y=mean, geom="bar")
#barplot by gender
bar1 <- ggplot(experimData, aes(sex, fost1))
bar1 <- bar1 + stat_summary(fun.y=mean, geom="bar")
bar2 <- ggplot(experimData, aes(sex, fost2))
bar2 <- bar2 + stat_summary(fun.y=mean, geom="bar")
grid.arrange(bar1, bar2, nrow = 1)
bar1 <- ggplot(experimData, aes(sex, fost1))
bar1 <- bar1 + stat_summary(fun.y=mean, geom="bar")
bar2 <- ggplot(experimData, aes(sex, fost2))
bar2 <- bar2 + stat_summary(fun.y=mean, geom="bar")
grid.arrange(bar1, bar2, nrow = 1)
#barplot by gender
bar1 <- ggplot(experimData, aes(sex, fost1))
bar1 <- bar1 + stat_summary(fun.y=mean, geom="bar")
require(gridExtra)
install_packages("girdExtra")
#barplot by gender
bar1 <- ggplot(experimData, aes(sex, fost1))
bar + stat_summary(fun.y=mean, geom="bar")
bar2 <- ggplot(experimData, aes(sex, fost1))
bar + stat_summary(fun.y=mean, geom="bar")
#barplot by gender
bar <- ggplot(experimData, aes(sex, fost1))
bar + stat_summary(fun.y=mean, geom="bar")
#barplot by gender
bar <- ggplot(experimData, aes(sex, fost1))
bar + stat_summary(fun.y=mean, geom="bar")
bar <- ggplot(experimData, aes(sex, fost1))
bar + stat_summary(fun.y=mean, geom="bar")
bar <- ggplot(experimData, aes(sex, fost1))
bar + stat_summary(fun.y=mean, geom="bar")
bar <- ggplot(experimData, aes(sex, fost1))
bar + stat_summary(fun.y=mean, geom="bar")

--create indexes on often used fields 
CREATE INDEX call_rates_call_type_id 
ON call_rates(call_type_id);

CREATE INDEX call_rates_plan_id
ON call_rates(plan_id);

--contract
CREATE TABLE contract_dim
AS
SELECT  contract_start_date as start_date, 
        contract_end_date as end_date,
        phone_number,
        (CASE WHEN contract_end_date < to_date('29-04-21','DD-MM-YY') THEN 1 ELSE 0 END) as is_ended
from customers;

ALTER TABLE contract_dim ADD ID NUMBER
    GENERATED BY DEFAULT AS IDENTITY;

ALTER TABLE contract_dim
ADD CONSTRAINT id_pk PRIMARY KEY (id);


-- create index in this highly used field to speed up queries
CREATE INDEX contract_is_ended
ON contract_dim(is_ended);


--contract plans
CREATE TABLE contract_plans_dim
AS
SELECT  *
FROM contract_plans;

ALTER TABLE contract_plans_dim
ADD CONSTRAINT id PRIMARY KEY (id);




-- social grade  
CREATE TABLE social_grade_dim
AS
SELECT  *
FROM social_grade;

ALTER TABLE social_grade_dim
ADD CONSTRAINT grade PRIMARY KEY (grade);




--Create a denormalized table just to facilitate the handling of calls, voicemails and customer_services on creating the facts table
CREATE TABLE calls_voicemails_customer_service AS --will call this in short cvcs
    SELECT  cvcs.phone_number, 
            cvcs.call_time, 
            ceil(cvcs.duration /60) as duration, 
            cvcs.connection_id, 
            'calls' as type,
            (CASE WHEN cvcs.is_international = 'TRUE' THEN 1 --international rate
            ELSE 
                CASE WHEN cvcs.is_roaming = 'TRUE' THEN 2 --roaming rate
                ELSE 
                    CASE WHEN extract( hour from cast(cvcs.call_time as timestamp)) > 7 AND extract( hour from cast(cvcs.call_time as timestamp)) < 19 THEN 3 --peak rate between 7AM and 19AM 
                    ELSE 4 --off-peak rate
                    END
                END
            END) as rate_id,    
            cr.cost_per_minute,
            ceil(SUM(cvcs.duration / 60) OVER (PARTITION BY cvcs.phone_number)) as total_call_duration_per_phone,
            ceil(AVG(cvcs.duration / 60) OVER (PARTITION BY cvcs.phone_number)) as avg_call_duration_per_phone,
            SUM(ceil(cvcs.duration / 60) * cr.cost_per_minute) OVER (PARTITION BY cvcs.phone_number) as total_spend_per_phone,
            COUNT(*) OVER (PARTITION BY cvcs.phone_number) as total_calls,
            SUM(
                CASE
                    WHEN  cvcs.call_time > to_date('29-03-21','DD-MM-YY')
                THEN 1
                ELSE 0
            END) OVER (PARTITION BY cvcs.phone_number) as total_calls_last_month,
            COUNT(*) OVER (PARTITION BY cvcs.phone_number) / NULLIF( --to avoid division by zero
                (MONTHS_BETWEEN( --get months between start of the contract and today
                        to_date('29-04-21 23:59','DD-MM-YY HH24:MI'), 
                        CASE --for handling contracts starting in the future
                            WHEN  contract.start_date < to_date('29-04-21 23:59','DD-MM-YY HH24:MI') THEN contract.start_date
                            ELSE to_date('29-04-21 23:59','DD-MM-YY HH24:MI') 
                        END )),
                 0) avg_calls_per_month
    FROM calls cvcs
    INNER JOIN customers c ON cvcs.phone_number = c.phone_number
    INNER JOIN contract_dim contract ON c.phone_number = contract.phone_number
    INNER JOIN call_rates cr ON (
                                    c.plan_id = cr.plan_id AND
                                    --same CASE from above to determine rate_id as I can plug a field created on the select in the join clause
                                    cr.call_type_id = (CASE WHEN cvcs.is_international = 'TRUE' THEN 1 --international rate
                                                            ELSE 
                                                                CASE WHEN cvcs.is_roaming = 'TRUE' THEN 2 --roaming rate
                                                                ELSE 
                                                                    CASE WHEN extract( hour from cast(cvcs.call_time as timestamp)) > 7 AND extract( hour from cast(cvcs.call_time as timestamp)) < 19 THEN 3 --peak rate between 7AM and 19AM 
                                                                    ELSE 4 --off-peak rate
                                                                    END
                                                                END
                                                            END))
    UNION 
    SELECT  cvcs.phone_number, 
            cvcs.call_time, 
            ceil(cvcs.duration /60) as duration, 
            cvcs.connection_id, 
            'voicemails' as type, 
            cvcs.call_type_id as rate_id,
            cr.cost_per_minute,
            ceil(SUM(cvcs.duration / 60) OVER (PARTITION BY cvcs.phone_number)) as total_call_duration_per_phone,
            ceil(AVG(cvcs.duration / 60) OVER (PARTITION BY cvcs.phone_number)) as avg_call_duration_per_phone,
            SUM(ceil(cvcs.duration / 60) * cr.cost_per_minute) OVER (PARTITION BY cvcs.phone_number) as total_spend_per_phone,
            COUNT(*) OVER (PARTITION BY cvcs.phone_number) as total_calls,
            SUM(
                CASE
                    WHEN  cvcs.call_time > to_date('29-03-21','DD-MM-YY')
                THEN 1
                ELSE 0
            END) OVER (PARTITION BY cvcs.phone_number) as total_calls_last_month,
            COUNT(*) OVER (PARTITION BY cvcs.phone_number) / NULLIF( --to avoid division by zero
                (MONTHS_BETWEEN( --get months between start of the contract and today
                        to_date('29-04-21 23:59','DD-MM-YY HH24:MI'), 
                        CASE --for handling contracts starting in the future
                            WHEN  contract.start_date < to_date('29-04-21 23:59','DD-MM-YY HH24:MI') THEN contract.start_date
                            ELSE to_date('29-04-21 23:59','DD-MM-YY HH24:MI') 
                        END )),
                 0) avg_calls_per_month
    FROM voicemails cvcs
    INNER JOIN customers c ON cvcs.phone_number = c.phone_number
    INNER JOIN contract_dim contract ON c.phone_number = contract.phone_number
    INNER JOIN call_rates cr ON (c.plan_id = cr.plan_id AND cvcs.call_type_id = cr.call_type_id)

    UNION
    SELECT  cvcs.phone_number, 
            cvcs.call_time, 
            ceil(cvcs.duration /60) as duration, 
            cvcs.connection_id, 
            'customer_service' as type, 
            cvcs.call_type_id as rate_id,
            cr.cost_per_minute,
            ceil(SUM(cvcs.duration / 60) OVER (PARTITION BY cvcs.phone_number)) as total_call_duration_per_phone,
            ceil(AVG(cvcs.duration / 60) OVER (PARTITION BY cvcs.phone_number)) as avg_call_duration_per_phone,
            SUM(ceil(cvcs.duration / 60) * cr.cost_per_minute) OVER (PARTITION BY cvcs.phone_number) as total_spend_per_phone,
            COUNT(*) OVER (PARTITION BY cvcs.phone_number) as total_calls,
            SUM(
                CASE
                    WHEN  cvcs.call_time > to_date('29-03-21','DD-MM-YY')
                THEN 1
                ELSE 0
            END) OVER (PARTITION BY cvcs.phone_number) as total_calls_last_month,
                        COUNT(*) OVER (PARTITION BY cvcs.phone_number) / NULLIF( --to avoid division by zero
                (MONTHS_BETWEEN( --get months between start of the contract and today
                        to_date('29-04-21 23:59','DD-MM-YY HH24:MI'), 
                        CASE --for handling contracts starting in the future
                            WHEN  contract.start_date < to_date('29-04-21 23:59','DD-MM-YY HH24:MI') THEN contract.start_date
                            ELSE to_date('29-04-21 23:59','DD-MM-YY HH24:MI') 
                        END )),
                 0) avg_calls_per_month
    FROM customer_service cvcs
    INNER JOIN customers c ON cvcs.phone_number = c.phone_number
    INNER JOIN contract_dim contract ON c.phone_number = contract.phone_number
    INNER JOIN call_rates cr ON (c.plan_id = cr.plan_id AND cvcs.call_type_id = cr.call_type_id);

--create indexes to speed up queries on this aggregated table
CREATE INDEX cvcs_phone_number 
ON calls_voicemails_customer_service(phone_number);

CREATE INDEX cvcs_type 
ON calls_voicemails_customer_service(type);





-- create customers_facts
CREATE TABLE customer_facts AS
    SELECT  c.phone_number as phone_number,  
            cp.id as contract_plans_id, 
            ctr.id as contract_id, 
            g.grade as grade_id,
            c.dob as dob,        
            MAX(cvcs.total_call_duration_per_phone) as total_call_duration,
            MAX(cvcs.avg_call_duration_per_phone) as avg_call_duration,

            (SELECT ceil(AVG(cvcs.duration/60)) 
                FROM calls_voicemails_customer_service cvcs 
                WHERE cvcs.phone_number = c.phone_number AND cvcs.type = 'calls' AND cvcs.call_time > to_date('29-03-21','DD-MM-YY')) as avg_call_duration_last_month,

            MAX(cvcs.total_spend_per_phone) as total_spend,

            MAX(cvcs.total_calls) as total_calls,
            MAX(cvcs.total_calls_last_month) as total_calls_last_month,
            MAX(cvcs.avg_calls_per_month) as avg_calls_per_month,

            (SELECT count(case when type = 'calls' and rate_id = 1 then 1 end) * 100/count(*) 
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number) as percentage_international_calls,

            (SELECT count(case when type = 'calls' and rate_id = 1 then 1 end) * 100/NULLIF(COUNT(*),0)
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number AND cvcs2.call_time > to_date('29-03-21','DD-MM-YY')) as percentage_international_calls_last_month,

            (SELECT count(case when type = 'calls' and rate_id = 2 then 1 end) * 100/count(*) 
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number) as percentage_roaming_calls,
            
            (SELECT count(case when type = 'calls' and rate_id = 2 then 1 end) * 100/NULLIF(COUNT(*),0)
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number AND cvcs2.call_time > to_date('29-03-21','DD-MM-YY')) as percentage_roaming_calls_last_month,
 
             (SELECT count(case when type = 'calls' and rate_id = 3 then 1 end) * 100/count(*) 
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number) as percentage_peak_calls,
            
            (SELECT count(case when type = 'calls' and rate_id = 3 then 1 end) * 100/NULLIF(COUNT(*),0) 
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number AND cvcs2.call_time > to_date('29-03-21','DD-MM-YY')) as percentage_peak_calls_last_month,
            
            (SELECT count(case when type = 'calls' and rate_id = 4 then 1 end) * 100/count(*) 
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number) as percentage_offpeak_calls,
            
            (SELECT count(case when type = 'calls' and rate_id = 4 then 1 end) * 100/NULLIF(COUNT(*),0) 
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number AND cvcs2.call_time > to_date('29-03-21','DD-MM-YY')) as percentage_offpeak_calls_last_month,
            
            
            (SELECT count(case when type = 'voicemails' then 1 end) * 100/count(*) 
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number) as percentage_voicemails,
            
            (SELECT count(case when type = 'voicemails' then 1 end) * 100/NULLIF(COUNT(*),0) 
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number AND cvcs2.call_time > to_date('29-03-21','DD-MM-YY')) as percentage_voicemails_last_month,
                
                
            (SELECT count(case when type = 'customer_service' then 1 end) * 100/count(*) 
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number) as percentage_customer_service,
            
            (SELECT count(case when type = 'customer_service' then 1 end) * 100/NULLIF(COUNT(*),0) 
                FROM calls_voicemails_customer_service cvcs2 
                WHERE cvcs2.phone_number = c.phone_number AND cvcs2.call_time > to_date('29-03-21','DD-MM-YY')) as percentage_customer_service_last_month           
            
    FROM customers c, contract_plans_dim cp, contract_dim ctr, social_grade_dim g, calls_voicemails_customer_service cvcs 
    WHERE   c.plan_id = cp.id
    AND     c.phone_number= ctr.phone_number 
    AND     c.nrs = g.grade
    AND     (cvcs.phone_number = c.phone_number AND cvcs.type = 'calls')
    GROUP BY c.phone_number, cp.id, ctr.id, g.grade, c.dob;



--create indexes to speed up queries on this facts table
CREATE INDEX cf_phone_number 
ON customer_facts(phone_number);


--create foreign keys on facts table
ALTER TABLE customer_facts
ADD FOREIGN KEY (contract_plans_id) REFERENCES contract_plans_dim(id);

ALTER TABLE customer_facts
ADD FOREIGN KEY (contract_id) REFERENCES contract_dim(id);

ALTER TABLE customer_facts
ADD FOREIGN KEY (grade_id) REFERENCES social_grade_dim(grade);
---
title: "Graphs Ahoy! Exploring R with the Titanic Dataset"
In this notebook we're going to explore the Titanic dataset. This dataset, although small, is quite popular for teaching the fundamentals of R. The dataset consists of 887 observations (that's *rows*, in database parlance) of 8 variables or *features*, (*columns* as they would be known in a database).
If you want to know more about R Markdown have a look [here](https://rmarkdown.rstudio.com/lesson-1.html).
# Overview
In this exercise we will
1. Download the dataset and parse it so we can begin manipulating it in R
# require('packageName') returns TRUE if the package has been downloaded on the
# user's machine and FALSE otherwise. The '!' operator is read as "Not". Essentially,
# here we're saying "if the require() function returns false, install the package"
if (!require('ggplot2')) install.packages('ggplot2')
if (!require('lattice')) install.packages('lattice')
# Even though they've been installed we still need to tell R to load them into memory
library(ggplot2)
library(lattice)
data <- read.csv(
'https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv'
)
# The line below forces R to output the dataset we just created
head(data)
summary(data)
#
data$Survived.logical <- as.logical(data$Survived)
data$Survived <- as.logical(data$Survived)
# Let's tidy up after ourselves and drop the Survived.logical feature we created
# earlier. R has a handy trick to do this. We assign the value list(NULL) to a
# column and R will delete it for us. Note that we're using square bracket notation
# (rather than the usual $ operator) and passing the column name in as a string. We'll
# talk more about this in # later classes but for now, just know that these are
# by-and-large equivalent.
# The list(NULL) trick only works with square bracket notation, however.
data["Survived.logical"] <- list(NULL)
# By passing in maxsum=5 I'm telling R to show me no more than 5 unique values.
summary(data$Name, maxsum=5)
data$Name <- as.character(data$Name)
summary(data$Name)
summary(data)
data$Survived
data <- read.csv(
'https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv'
)
# The line below forces R to output the dataset we just created
head(data)
data$Survived
as.logical(data$Survived)
#
data$Survived.logical <- as.logical(data$Survived)
data$Survived <- as.logical(data$Survived)
# By passing in maxsum=5 I'm telling R to show me no more than 5 unique values.
summary(data$Name, maxsum=5)
data$Name <- as.character(data$Name)
summary(data$Name)
summary(data$Sex)
data$Sex <- as.factor(data$Sex)
summary(data$Sex)
summary(data)
#
data$Survived.logical <- as.logical(data$Survived)
data$Survived <- as.logical(data$Survived)
# Let's tidy up after ourselves and drop the Survived.logical feature we created
# earlier. R has a handy trick to do this. We assign the value list(NULL) to a
# column and R will delete it for us. Note that we're using square bracket notation
# (rather than the usual $ operator) and passing the column name in as a string. We'll
# talk more about this in # later classes but for now, just know that these are
# by-and-large equivalent.
# The list(NULL) trick only works with square bracket notation, however.
data["Survived.logical"] <- list(NULL)
# By passing in maxsum=5 I'm telling R to show me no more than 5 unique values.
summary(data$Name, maxsum=5)
data$Name <- as.character(data$Name)
summary(data$Name)
summary(data$Sex)
data$Sex <- as.factor(data$Sex)
summary(data$Sex)
summary(data$Pclass)
?factor
data$Pclass <- factor(data$Pclass,
order=TRUE,
levels=c(1,2,3),
labels=c("1st Class", "2nd Class", "3rd Class")
)
summary(data$Pclass)
summary(data$Age)
summary(as.factor(data$Age %% 1))
data$Age <- as.integer(data$Age)
ggplot(data, aes(x=Age, fill=Survived)) +
geom_histogram() +
labs(title="Survival Rate by Age")
# This for loop is telling R to create this plot with different binwidths.
# 1:10 is a shorthand way of writing c(1,2,3,4,5,6,7,8,9,10)
for (binwidth in 1:10) {
# Because we're inside a for loop, we now need to explicitly tell ggplot
# to draw our plot by using the print() function
print(ggplot(data, aes(x=Age, fill=Survived)) +
geom_histogram(binwidth=binwidth) +
labs(title=paste("Survival Rate by Age, Binwidth", binwidth)))
}
ggplot(data, aes(x=Sex, fill=Survived)) +
geom_bar(position="dodge") +
scale_fill_discrete(name = "Outcome", labels = c("Did Not Survive", "Survived")) +
labs(title="Passenger Survival by Gender")
install.packages(c(
'repr',
'IRdisplay',
'evaluate',
'crayon',
'pbdZMQ',
'devtools',
'uuid',
'digest',
'git2r'
), dependencies = TRUE)
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec(user = FALSE)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
devtools::install_github("IRkernel/IRkernel", force=TRUE)
IRkernel::installspec()
convert_ipynb("week3_importing_data_with_R/Introduction to R.ipynb", output = xfun::with_ext("week3_importing_data_with_R/Introduction to R.ipynb", "Rmd"))
convert_ipynb
?convert_ipynb
??convert_ipynb
rmarkdown:::convert_ipynb()
rmarkdown:::convert_ipynb("week3_importing_data_with_R/Introduction to R.ipynb")
---
title: An R Markdown document converted from "week3_importing_data_with_R/Introduction
# Introduction to R
The **R** language was originally aimed at statisticians, so you might find it works a little differently to the more developer-oriented languages you're used to. It's well worth investing the time to get comfortable with R, though; it's a very fast and easy-to-use programming language which will let you knock out visualisations and data-exploration scripts in next to no time. *Please read all the notebook running one cell at a time so that you can confirm that you understood the respective explanation.*
## Table of Contents
1. [The Basic Types in R](#basic-types)
## Basic Types in R <a name="basic-types"></a>
R contains **3 basic data types**:
* numeric
### Numeric Data Types
Numeric data types can be further broken down into **integer** and **double** types. As with Python, integers are whole numbers with no decimal components. Doubles are R's equivalent to Python's float. R considers numeric values to be *doubles* by default (statisticians almost always end up with decimal places), if you specifically want an integer value you can add the **L** suffix (capital L) to the end of the number.
*aside:* this convention stems from the fact that R uses 64 bits rather than 32 bits to store an integer, the largest integer you can write is thus 2^64. C uses 32 bits by default to store an integer and the larger-capacity 64-bit equivalent is referred to as a *Long*. Similarly, numbers with decimals are referred to as *floats* in C (floating point refers to the fact that the decimal can be in different positions within the number). Floats are represented with 32-bits, whereas a larger capacity 64-bit floating-point number is known as a *double*
```{r}
print(paste("Type of 4?", typeof(4)))
print(paste("Type of 4L?", typeof(4L)))
print(paste("Type of 4?", typeof(4)))
print(paste("Type of 4L?", typeof(4L)))
Because of the way R (and Python) handles floating point (double) numbers, you can occasionally find very small errors in calculations. Consider the following code, for example
```{r}
print(paste("0.5 - 0.4 = ", 0.5 - 0.4))
print(paste("0.5 - 0.4 == 0.1 ", 0.5 - 0.4 == 0.1)) # Really?
print(paste("0.5 - 0.4 = ", 0.5 - 0.4))
print(paste("0.5 - 0.4 == 0.1 ", 0.5 - 0.4 == 0.1)) # Really?
Although R is showing 0.1 as the result of the above subtraction, the actual value it's getting is 0.09999999999999998. By default, it will format these numbers to *appear to* round them to the nearest decimal place; but can have unexpected behaviour, as we've seen above. If you need to compare floats you are usually better using something like the **all.equal()** function which has a built-in tolerance for tiny differences due to floating-point rounding errors
```{r}
all.equal(0.5 - 0.4, 0.1) # That's more like it!
print(paste("5 + 3 = ", 5 + 3))
print(paste("5 * 3 = ", 5 * 3))
print(paste("5 - 3 = ", 5 - 3))
print(paste("5 / 3 = ", 5 / 3))
print(paste("5 %% 3 = ", 5 %% 3)) # the modulo operator ('%' in Python)
print(paste("5 ^ 3 = ", 5 ^ 3))
print(paste("5 == 3", 5 == 3))
print(paste("5 != 3", 5 != 3))
x <- 8
y <- 9
TRUE == T
FALSE == F
FALSE != TRUE
T | F
FALSE & TRUE
(5 > 3) | (2 != 2)
(6 == 7) & (5 >= 5)
"Hello World" == 'Hello World'
paste("Hello", "World")
paste("Hello", "World", "Again", sep="")
paste("Goodbye", "cruel", "world")
paste0("Hello", "World") # This is equivalent to the following
paste("Hello", "World", sep="")
nchar("Lucas")
substr("hayneedlestack", 4, 9)
toupper("upper case")
tolower("LOWER CASE")
words <- c("hayneedlestack", "haystack", "needle and thread")
grepl("needle", words)
roles <- factor(c('Lecturer', 'Student', 'Student', 'Teaching Assistant'))
roles
roles <- factor(c('Lecturer', 'Student', 'Student', 'Teaching Assistant'), levels=c('Lecturer', 'Student', 'Teaching Assistant', 'Course Chair'))
roles
levels(roles)
levels(roles) <- c('Lecturer', 'Student', 'Teaching Assistant', 'Course Chair', 'Head of School')
as.character(T)
as.character(1L)
as.character(2.5)
as.integer(TRUE)
as.integer(FALSE)
as.double(T)
as.double(F)
as.double(5L)
as.integer('lucas')
x <- '25'
if (!is.numeric(x)) {
print('value not numeric, converting')
x <- as.numeric(x)
}
x <- x * 2
NA + 3 + 5 * 2
sum(3, 6, 8, NA)
sum(3, 6, 8, NA, na.rm=T)
x <- 3
y <- NA
if (is.na(y)) {
z = x
} else {
z = x + y
}
z
if (is.na(y)) {
z = x
} else {
z = x + y
}
z
## Sequences, Lists And Vectors <a name="lists-and-vectors"></a>
As with any data-wrangling-oriented language, you won't often find yourself working with individual values in R. We tend to deal with rows, columns, and tables (data-frames). When we want to work with collections of values in R, we can use either **lists** or **vectors**.
### Sequences
We can use the colon **:** operator in R to quickly generate a sequence of numbers. The colon operator creates a sequence from the number on the left, to the number on the right **inclusive**.
```{r}
1:5
10:5
1:5
10:5
The colon operator will only allow us to generate sequences going in steps of 1 (or -1), as this is a very commonly used sequence. However, really it's just shorthand for the following
```{r}
seq(1, 5)
seq(1, 5)
The **seq()** function allows us to generate any type of sequence we like. It takes an optional named parameter **by**, which allows us to specify the step.
```{r}
evens <- seq(2, 20, by=2)
evens
evens <- seq(2, 20, by=2)
evens
### Vectors
Vectors are one of the fundamental data structures in R. We saw in Python that lists *allow* you to hold different types of values. In R, all values in vectors **must be of the same type**. Vectors can be created using the **c()** (combine) function. You can check how many elements a vector contains using the **length()** function.
```{r}
# Create vectors using the c() function
primes <- c(1, 3, 5, 7)
# Count elements using the length() function
length(primes)
# The seq() function returns a vector
is.vector(1:10)
# The seq() function returns a vector
is.vector(1:10)
Vectors are *first class citizens* in R, and calculations involving vectors are easy to express in code, and highly optimized by the R runtime. Arithmetic operators in R are *Vectorized*, meaning if we operate on a vector and a scalar (single value) the output will be a vector where the value is the result of the operator being applied to each element of the input vector. That's a bit of a mouthful, so it might be easier to see it in action
```{r}
odds <- c(1, 3, 5, 7, 9, 11)
evens <- odds + 1
print(evens)
squares <- (1:4) ^ 2
print(squares)
squares <- (1:4) ^ 2
print(squares)
If we perform an operation on two vectors of equal length, the output is a vector with the result of performing that operation on the **corresponding elements** of each vector
```{r}
c(1, 3, 5) * c(1, 2, 3)
c(1, 3, 5) * c(1, 2, 3)
These are the two most common use-cases of vector arithmetic. It is also possible to perform operations on vectors of different lengths. If you'd like to find out more about the ins and outs of vectorised arithmetic, see the [R documentation](https://cran.r-project.org/doc/manuals/R-intro.pdf) for further details.
### Lists
A list in R is very similar to a Python list. Lists allow us to store multiple different types of data. The **list()** function allows us to create a list.
```{r}
student <- list('d12345678', 1, 65.0, 63.0)
student
student <- list('d12345678', 1, 65.0, 63.0)
student
We saw that in Python, lists are zero-indexed, meaning the first item in a list is in position 0, the second in position 1 etc. **R lists are one-indexed** (R was originally aimed at statisticians, not programmers, and statisticans have long known that counting from zero is a silly idea). The first item in a list is in position 1, the second in position 2 *etc.* We can return multiple elements from a list by using a vector to index it. This is known as list slicing.
```{r}
student[1]
student[1:2]
student[c(3, 4, 1)]
student[c(3, 4, 1)]
By default, square-bracket indexing will return a new list. If only a single item is selected, this will be a list with only one element. If we want to retrieve an individual value we can use the **double-square-bracket** notation. This, of course, only works with individual indices, and not with slicing
```{r}
student[[1]]
library(datasets)
data(iris)
print(paste("The iris variable holds a dataframe?", is.data.frame(iris)))
print(paste("The Iris dataframe has ", nrow(iris), "rows"))
print(paste("The Iris dataframe has ", ncol(iris), "columns"))
print("Column Names:")
print(names(iris))
head(iris) # head() shows us the first 6 rows of the dataset
library(datasets)
data(iris)
print(paste("The iris variable holds a dataframe?", is.data.frame(iris)))
print(paste("The Iris dataframe has ", nrow(iris), "rows"))
print(paste("The Iris dataframe has ", ncol(iris), "columns"))
print("Column Names:")
print(names(iris))
head(iris) # head() shows us the first 6 rows of the dataset
In any dataframe (as with pretty much any table structure) all values in a column must be of the same type, for example, a name column wil always be of character type. To think about this in terms of *R*, this means that every column in a data frame will be a **vector**.
```{r}
iris$Sepal.Length
is.vector(iris$Sepal.Length)
iris$Sepal.Length
is.vector(iris$Sepal.Length)
A dataframe is really nothing more than a list of columns. It does have some additional functionality but really at bottom it's just a specialised list. Each column in a data frame has a name, so to be more precise, a dataframe is a **named list** where every item is a vector. You may have noticed above that we could get the column names from a dataframe using the names() function; the reason this works is because a dataframe is really just a named list.
We can check this using the is.list() function
```{r}
is.list(iris)
View(iris)
